#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Time    : 2023/11/23 14:07
# @Author  : ShengPengpeng
# @File    : swc.py
# @Description :

#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Time    : 2023/11/22 12:25
# @Author  : ShengPengpeng
# @File    : swc.py
# @Description :

import csv
import copy
import math
import six

# 形态学节点有以下字段。SWC字段是数字
NODE_ID = 'id'
NODE_TYPE = 'type'
NODE_X = 'x'
NODE_Y = 'y'
NODE_Z = 'z'
NODE_R = 'radius'
NODE_PN = 'parent'
SWC_COLUMNS = [NODE_ID, NODE_TYPE, NODE_X, NODE_Y, NODE_Z, NODE_R, NODE_PN]

NODE_TREE_ID = 'tree_id'
NODE_CHILDREN = 'children'

# 字典条目的简写，用来缩短有时很长的代码行
_N = NODE_ID
_TYP = NODE_TYPE
_X = NODE_X
_Y = NODE_Y
_Z = NODE_Z
_R = NODE_R
_P = NODE_PN
_C = NODE_CHILDREN
_TID = NODE_TREE_ID


########################################################################
########################################################################
class Compartment(dict):
    """
        一个字典类，存储关于单个形态学节点的信息
    """

    def __init__(self, *args, **kwargs):
        super(Compartment, self).__init__(*args, **kwargs)
        if (NODE_ID not in self or
                NODE_TYPE not in self or
                NODE_X not in self or
                NODE_Y not in self or
                NODE_Z not in self or
                NODE_R not in self or
                NODE_PN not in self):
            raise ValueError(
                "Compartment was not initialized with requisite fields")
        # Each unconnected graph has its own ID.
        # This is the ID of graph that the node resides in
        self[NODE_TREE_ID] = -1

        # IDs of child nodes
        self[NODE_CHILDREN] = []

    def print_node(self):
        """ print out compartment information with field names """
        print("%d %d %.4f %.4f %.4f %.4f %d %s %d" % (self[_N], self[_TYP], self[
              _X], self[_Y], self[_Z], self[_R], self[_P], str(self[_C]), self[_TID]))



########################################################################
def read_swc(file_name, columns="NOT_USED", numeric_columns="NOT_USED"):
    """
    读入SWC文件并返回一个形态学对象

    Parameters
    ----------
    file_name: string
        SWC file name.

    Returns
    -------
    Morphology
        A Morphology instance.
    """
    compartments = []
    line_num = 1
    try:
        with open(file_name, "r") as f:
            print(file_name)
            for line in f:

                # 移除注释
                if line.lstrip().startswith('#'):
                    continue
                if line.isspace():
                    continue
                # 读值。期望的SWC格式是:
                #   ID, type, x, y, z, rad, parent
                # x, y, z and rad are floats. the others are ints
                toks = line.lstrip().split()

                # print(toks)

                vals = Compartment({
                    NODE_ID: int(toks[0]),
                    NODE_TYPE: int(toks[1]),
                    NODE_X: float(toks[2]),
                    NODE_Y: float(toks[3]),
                    NODE_Z: float(toks[4]),
                    NODE_R: float(toks[5]),
                    NODE_PN: int(toks[6].rstrip())
                })
                # 储存这个隔间
                compartments.append(vals)
                # 递增行号(仅用于错误报告)
                line_num += 1

    except ValueError:
        err = "File not recognized as valid SWC file.\n"
        err += "Problem parsing line %d\n" % line_num
        if line is not None:
            err += "Content: '%s'\n" % line
        raise IOError(err)

    return Morphology(compartment_list=compartments)

class Morphology(object):
    """
    Keep track of the list of compartments in a morphology and provide
    a few helper methods (soma, tree information, pruning, etc).
    """
    SOMA = 1
    AXON = 2
    DENDRITE = 3
    BASAL_DENDRITE = 3
    APICAL_DENDRITE = 4

    NODE_TYPES = [SOMA, AXON, DENDRITE, BASAL_DENDRITE, APICAL_DENDRITE]

    def __init__(self, compartment_list=None, compartment_index=None):
        """
        尝试先从区间列表初始化，

        如果失败，则从按区间 ID 索引的字典初始化，

        最后将所有内容留空

        Parameters
        ----------
        compartment_list: list
            list of compartment dictionaries

        compartment_index: dict
            dictionary of compartments indexed by id
        """
        self._compartment_list = []
        self._compartment_index = {}

        ##############################################
        # define tree list here for clarity, even though it's reset below
        #   when nodes are assigned
        self._tree_list = []

        ##############################################
        # construct the compartment list and index
        # first try to do so using the compartment list, then try using
        #   the compartment index and if that fails then complain
        if compartment_list:
            self.compartment_list = compartment_list
        elif compartment_index:
            self.compartment_index = compartment_index

        ##############################################
        # verify morphology is consistent with morphology rules (e.g.,
        #   no dendrite branching from an axon)
        num_errors = self._check_consistency()
        if num_errors > 0:
            raise ValueError("Morphology appears to be inconsistent")

        ##############################################
        # root node (this must be part of the soma)
        self._soma = None
        for i in range(len(self.compartment_list)):
            seg = self.compartment_list[i]
            if seg[NODE_TYPE] == Morphology.SOMA and seg[NODE_PN] < 0:
                if self._soma is not None:
                    raise ValueError("Multiple somas detected in SWC file")
                self._soma = seg
    @property
    def compartment_list(self):
        """ Return the compartment list.  This is a property to ensure that the
        compartment list and compartment index are in sync. """
        return self._compartment_list


    @compartment_list.setter
    def compartment_list(self, compartment_list):
        """ Update the compartment list.  Update the compartment index. """
        self._set_compartments(compartment_list)

    @property
    def num_trees(self):
        """ Return the number of trees in the morphology. A tree is
        defined as everything following from a single root compartment. """
        return len(self._tree_list)

    # TODO add filter for number of nodes of a particular type
    @property
    def num_nodes(self):
        """ Return the number of compartments in the morphology. """
        return len(self.compartment_list)


    @property
    def soma(self):
        """ Returns root node of soma, if present"""
        return self._soma

    @property
    def root(self):
        """ [deprecated] Returns root node of soma, if present. Use 'soma' instead of 'root'"""
        return self._soma

    ####################################################################
    ####################################################################
    # tree and node access

    def tree(self, n):
        """
        Returns a list of all Morphology Nodes within the specified
        tree. A tree is defined as a fully connected graph of nodes.
        Each tree has exactly one root.

        Parameters
        ----------
        n: integer
            ID of desired tree

        Returns
        -------
        A list of all morphology objects in the specified tree, or None
        if the tree doesn't exist
        """
        if n < 0 or n >= len(self._tree_list):
            return None
        return self._tree_list[n]

    def node(self, n):
        return self._resolve_node_type(n)

    def parent_of(self, seg):
        return None

    def children_of(self, seg):
        return [self._compartment_list[c] for c in seg[NODE_CHILDREN]]


    ####################################################################
    ####################################################################

    # internal function
    def _set_compartments(self, compartment_list):
        """
        获取类SWC对象的列表并将其转换为形态节点需要能够从SWC文件提供的列表进行初始化，

        同时还能够从现有形态对象的隔间列表进行初始化。

        由于形态对象中的节点包含对该对象中节点的引用，

        请制作输入节点的浅层副本并覆盖已知引用（即“子”数组）
        """
        self._compartment_list = []
        for obj in compartment_list:
            seg = copy.copy(obj)
            seg[NODE_TREE_ID] = -1
            seg[NODE_CHILDREN] = []
            self._compartment_list.append(seg)
        self._reconstruct()


    def _reconstruct(self):
        """
        internal function that restructures data and establishes
        appropriate internal linking. data is re-order, removing 'holes'
        in sequence so that each object ID corresponds to its position
        in compartment list. trees are (re)calculated
        parent-child indices are recalculated as is compartment table
        construct a map between new and old IDs
        """
        remap = {}
        # everything defaults to root. this way if a parent was deleted
        #   the child will become a new root
        for i in range(len(self.compartment_list)):
            remap[i] = -1
        # map old old node numbers to new ones. reset n to the new ID
        #   and put node in new list
        new_id = 0
        tmp_list = []
        for seg in self.compartment_list:
            if seg is not None:
                remap[seg[NODE_ID]] = new_id
                seg[NODE_ID] = new_id
                tmp_list.append(seg)
                new_id += 1
        # use map to reset parent values. copy objs to new list
        for seg in tmp_list:
            if seg[NODE_PN] >= 0:
                seg[NODE_PN] = remap[seg[NODE_PN]]
        # replace compartment list with newly created node list
        self._compartment_list = tmp_list
        # reconstruct parent/child relationship links
        # forget old relations
        for seg in self.compartment_list:
            seg[NODE_CHILDREN] = []
        # add each object to its parents child list
        for seg in self.compartment_list:
            par_num = seg[NODE_PN]
            if par_num >= 0:
                self.compartment_list[par_num][
                    NODE_CHILDREN].append(seg[NODE_ID])
        # update tree lists
        self._separate_trees()
        ############################
        # Rebuild internal index and links between parents and children
        self._compartment_index = {
            c[NODE_ID]: c for c in self.compartment_list}
        # compartment list is complete and sequential so don't need index
        #   to resolve relationships
        # for each node, reset children array
        # for each node, add self to parent's child list
        for seg in self._compartment_list:
            seg[NODE_CHILDREN] = []
        for seg in self._compartment_list:
            if seg[NODE_PN] >= 0:
                self._compartment_list[seg[NODE_PN]][NODE_CHILDREN].append(seg[NODE_ID])
        # verify that each node ID is the same as its position in the
        #   compartment list
        for i in range(len(self.compartment_list)):
            if i != self.node(i)[NODE_ID]:
                raise RuntimeError(
                    "Internal error detected -- compartment list not properly formed")

    def _separate_trees(self):
        """
        construct list of independent trees (each tree has a root of -1)
        """
        trees = []
        # reset each node's tree ID to indicate that it's not assigned
        for seg in self.compartment_list:
            seg[NODE_TREE_ID] = -1
        # construct trees for each node
        # if a node is adjacent an existing tree, merge to it
        # if a node is adjacent multiple trees, merge all
        for seg in self.compartment_list:
            # see what trees this node is adjacent to
            local_trees = []
            if seg[NODE_PN] >= 0 and self.compartment_list[seg[NODE_PN]][NODE_TREE_ID] >= 0:
                local_trees.append(self.compartment_list[
                                   seg[NODE_PN]][NODE_TREE_ID])
            for child_id in seg[NODE_CHILDREN]:
                child = self.compartment_list[child_id]
                if child[NODE_TREE_ID] >= 0:
                    local_trees.append(child[NODE_TREE_ID])
            # figure out which tree to put node into
            # if there are muliple possibilities, merge all of them
            if len(local_trees) == 0:
                tree_num = len(trees)  # create new tree
            elif len(local_trees) == 1:
                tree_num = local_trees[0]   # use existing tree
            elif len(local_trees) > 1:
                # this node is an intersection of multiple trees
                # merge all trees into the first one found
                tree_num = local_trees[0]
                for j in range(1, len(local_trees)):
                    dead_tree = local_trees[j]
                    trees[dead_tree] = []
                    for node in self.compartment_list:
                        if node[NODE_TREE_ID] == dead_tree:
                            node[NODE_TREE_ID] = tree_num
            # merge node into tree
            # ensure there's space
            while len(trees) <= tree_num:
                trees.append([])
            trees[tree_num].append(seg)
            seg[NODE_TREE_ID] = tree_num
        # consolidate tree lists into class's tree list object
        self._tree_list = []
        for tree in trees:
            if len(tree) > 0:
                self._tree_list.append(tree)
        # make soma's tree be the first tree, if soma present
        # this should be the case if the file is properly ordered, but
        #   don't assume that
        soma_tree = -1
        for seg in self.compartment_list:
            if seg[NODE_TYPE] == 1:
                soma_tree = seg[NODE_TREE_ID]
                break
        if soma_tree > 0:
            # swap soma tree for first tree in list
            tmp = self._tree_list[soma_tree]
            self._tree_list[soma_tree] = self._tree_list[0]
            self._tree_list[0] = tmp
        # reset node tree_id to correct tree number
        self._reset_tree_ids()

    def _reset_tree_ids(self):
        """
        reset each node's tree_id value to the correct tree number
        """
        for i in range(len(self._tree_list)):
            for j in range(len(self._tree_list[i])):
                self._tree_list[i][j][NODE_TREE_ID] = i

    def _check_consistency(self):
        """
        internal function -- don't publish in the docs
        TODO? print warning if unrecognized types are present
        Return value: number of errors detected in file
        """
        errs = 0
        # Make sure that the parents are of proper ID range
        n = self.num_nodes
        for seg in self.compartment_list:
            if seg[NODE_PN] >= 0:
                if seg[NODE_PN] >= n:
                    print("Parent for node %d is invalid (%d)" %
                          (seg[NODE_ID], seg[NODE_PN]))
                    errs += 1
        # make sure that each tree has exactly one root
        for i in range(self.num_trees):
            tree = self.tree(i)
            root = -1
            for j in range(len(tree)):
                if tree[j][NODE_PN] == -1:
                    if root >= 0:
                        print("Too many roots in tree %d" % i)
                        errs += 1
                    root = j
            if root == -1:
                print("No root present in tree %d" % i)
                errs += 1
        # make sure each axon has at most one root
        # find type boundaries. at each axon boundary, walk back up
        #   tree to root and make sure another axon segment not
        #   encountered
        adoptees = self._find_type_boundary()
        for child in adoptees:
            if child[NODE_TYPE] == Morphology.AXON:
                par_id = child[NODE_PN]
                while par_id >= 0:
                    par = self.compartment_list[par_id]
                    if par[NODE_TYPE] == Morphology.AXON:
                        print("Branch has multiple axon roots")
                        print(child)
                        print(par)
                        errs += 1
                        break
                    par_id = par[NODE_PN]
        if errs > 0:
            print("Failed consistency check: %d errors encountered" % errs)
        return errs


    def _find_type_boundary(self):
        """
        return a list of segments who have parents that are a different type
        """
        adoptees = []
        for node in self.compartment_list:
            par = self.parent_of(node)
            if par is None:
                continue
            if node[NODE_TYPE] != par[NODE_TYPE]:
                adoptees.append(node)
        return adoptees

    ###############################################################################
    ################################################################################
    def save(self, file_name):
        """ Write this morphology out to an SWC file

        Parameters
        ----------
        file_name: string
            desired name of your SWC file
        """
        f = open(file_name, "w")
        f.write("#n,type,x,y,z,radius,parent\n")
        for seg in self.compartment_list:
            f.write("%d %d " % (seg[NODE_ID], seg[NODE_TYPE]))
            f.write("%0.4f " % seg[NODE_X])
            f.write("%0.4f " % seg[NODE_Y])
            f.write("%0.4f " % seg[NODE_Z])
            f.write("%0.4f " % seg[NODE_R])
            f.write("%d\n" % seg[NODE_PN])
        f.close()

    # keep for backward compatibility, but don't publish in docs
    def write(self, file_name):
        self.save(file_name)

    ###################################################################
    ###################################################################
    # Information querying and data manipulation

    # internal function. takes an integer and returns the node having
    #   that ID. IF a node is passed in instead, it is returned
    def _resolve_node_type(self, seg):
        # if compartment passed then we don't need to convert anything
        # if compartment not passed, try converting value to int
        #   and using that as an index
        if not isinstance(seg, Compartment):
            try:
                seg = int(seg)
                if seg < 0 or seg >= len(self._compartment_list):
                    return None
                seg = self._compartment_list[seg]
            except ValueError:
                raise TypeError(
                    "Object not recognized as morphology node or index")
        return seg

    # strip out the specified SWC type
    def strip_type(self, node_type):
        """ Strips all compartments of the specified type from the
        morphology.
        Parent and child relationships are updated accordingly, creating
        new roots when necessary.

        Parameters
        ----------
        node_type: enum
            The compartment type to strip from the morphology.
            Use one of the following constants: SOMA, AXON, DENDRITE,
            BASAL_DENDRITE, or APICAL_DENDRITE
        """
        flagged_for_removal = {}
        # print(node_type)
        for seg in self.compartment_list:
            # print(seg[NODE_TYPE])
            if seg[NODE_TYPE] == node_type:
                remove = True
            else:
                remove = False
            if remove:
                flagged_for_removal[seg[NODE_ID]] = True
        for i in range(len(self.compartment_list)):
            seg = self.compartment_list[i]
            if seg[NODE_ID] in flagged_for_removal:
                # eliminate node
                self.compartment_list[i] = None
            elif seg[NODE_PN] in flagged_for_removal:
                # parent was eliminated. make this a new root
                seg[NODE_PN] = -1
        self._reconstruct()



if __name__ == '__main__':
    read_swc('../data/neuron7/swc_ori/20131213_recon_IN_BR.CNG.swc')
